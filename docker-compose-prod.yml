services:
  db:
    image: postgres:latest
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --locale=C.UTF-8
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U robouser -d robodb"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app_network

  backend:
    build: 
      context: ./backend
      args:
        - UID=1000
        - GID=1000
    env_file:
      - ./backend/.env
    user: "1000:1000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_data:/app/staticfiles
      - media_data:/app/media
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app_network


  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    expose:
      - 3000
    depends_on:
      backend:
        condition: service_healthy 
    restart: unless-stopped
    networks:
      - app_network


  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_data:/app/staticfiles
      - media_data:/app/media
      - certbot_etc:/etc/letsencrypt:ro
      - certbot_www:/var/www/letsencrypt:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck: 
      test: ["CMD", "curl", "-k", "-f", "https://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app_network


  certbot:
    image: nbraun1/certbot
    container_name: certbot
    depends_on:
      - nginx
    environment:
      EMAIL: bhanupratapsingh9188@gmail.com
      DOMAINS: navyugam.com,www.navyugam.com
      AUTHENTICATOR: webroot
      WEBROOT_PATH: /var/www/letsencrypt
      POST_HOOK_CMD: docker kill -s HUP $$(docker ps --filter "name=webserver" | awk '{print $$1}')
      CRON: "0 0 1 * *"
    volumes:
      - certbot_etc:/etc/letsencrypt
      - certbot_www:/var/www/letsencrypt
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  db_data:
  static_data:
  media_data:
  certbot_etc:
  certbot_www:

