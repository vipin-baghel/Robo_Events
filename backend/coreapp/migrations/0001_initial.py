# Generated by Django 5.2.1 on 2025-05-12 21:06

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Championship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., RoboCup 2025, National Robotics League 2024', max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False, help_text='Mark as active for the current/upcoming championship.')),
                ('location', models.CharField(blank=True, help_text='Location of the championship (e.g., University of Technology, Robotics Arena)', max_length=200)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='NewsUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('news_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('content', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, help_text='Image accompanying the news update.', null=True, upload_to='news_images/')),
                ('is_published', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-news_date'],
            },
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_video_url', models.URLField(blank=True, help_text='URL for the main banner video (e.g., YouTube, Vimeo).', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('institution', models.CharField(blank=True, help_text='School, University, or Organization', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Robo Race, Line Follower, Robo Soccer', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of the event name (auto-generated if possible).', max_length=120, unique=True)),
                ('short_description', models.TextField(blank=True, help_text='A brief overview for listings.')),
                ('display_in_navigation', models.BooleanField(default=True, help_text='Include this event in homepage navigation.')),
                ('championship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='coreapp.championship')),
            ],
        ),
        migrations.CreateModel(
            name='TeamRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(help_text='Overall or championship-specific rank.', validators=[django.core.validators.MinValueValidator(1)])),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('video_url_1', models.URLField(blank=True, help_text='Primary video URL for this ranked team (e.g., performance highlight).', null=True)),
                ('video_url_2', models.URLField(blank=True, help_text='Secondary video URL for this ranked team.', null=True)),
                ('championship', models.ForeignKey(blank=True, help_text='Link to a specific championship if ranks are per championship.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='coreapp.championship')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='coreapp.team')),
            ],
            options={
                'ordering': ['rank', '-points_earned'],
                'unique_together': {('team', 'championship')},
            },
        ),
    ]
