# Generated by Django 5.2.1 on 2025-06-26 07:13

import coreapp.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Championship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., RoboCup 2025, National Robotics League 2024', max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False, help_text='Mark as active for the current/upcoming championship.')),
                ('location', models.CharField(blank=True, help_text='Location of the championship (e.g., University of Technology, Robotics Arena)', max_length=200)),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the championship (recommended size: 1200x630px)', null=True, upload_to=coreapp.models.championship_image_path)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Robo Race, Line Follower, Robo Soccer', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of the event name (auto-generated if possible).', max_length=120, unique=True)),
                ('short_description', models.TextField(blank=True, help_text='A brief overview for listings.')),
                ('start_date', models.DateField(blank=True, help_text='Start date of the event', null=True)),
                ('end_date', models.DateField(blank=True, help_text='End date of the event', null=True)),
                ('location', models.CharField(blank=True, help_text='Venue or location where the event will take place', max_length=200)),
                ('rules_and_eligibility', models.TextField(blank=True, help_text='Detailed rules and eligibility criteria for the event')),
                ('organized_by', models.CharField(blank=True, help_text='Organization or committee organizing the event', max_length=200)),
                ('sponsored_by', models.CharField(blank=True, help_text='Sponsors of the event', max_length=200)),
                ('display_in_navigation', models.BooleanField(default=True, help_text='Include this event in homepage navigation.')),
                ('image_url', models.URLField(blank=True, help_text='URL of the image to display for this event', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FooterContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField(blank=True, help_text="Institution's physical address", null=True)),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=254, null=True, validators=[django.core.validators.EmailValidator()])),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('facebook_url', models.URLField(blank=True, help_text='Facebook profile/page URL', null=True, validators=[django.core.validators.URLValidator()])),
                ('twitter_url', models.URLField(blank=True, help_text='Twitter profile URL', null=True, validators=[django.core.validators.URLValidator()])),
                ('instagram_url', models.URLField(blank=True, help_text='Instagram profile URL', null=True, validators=[django.core.validators.URLValidator()])),
                ('youtube_url', models.URLField(blank=True, help_text='YouTube channel URL', null=True, validators=[django.core.validators.URLValidator()])),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile/company URL', null=True, validators=[django.core.validators.URLValidator()])),
                ('about_text', models.TextField(blank=True, help_text='Brief description about the institution for the footer', null=True)),
                ('copyright_text', models.CharField(default='© 2025 Robotics Institution. All rights reserved.', help_text='Copyright text to display in footer', max_length=255)),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable this footer configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Footer Content',
                'verbose_name_plural': 'Footer Content',
                'ordering': ['-is_active', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NewsUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('news_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('content', models.TextField(blank=True)),
                ('image_url', models.URLField(blank=True, help_text='URL of the image accompanying the news update.', null=True)),
                ('is_published', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-news_date'],
            },
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_video', models.FileField(blank=True, help_text='Upload the main banner video file (mp4, webm, etc.).', null=True, upload_to='banner_videos/')),
            ],
            options={
                'verbose_name': 'Banner Video',
                'verbose_name_plural': 'Banner Video',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('institution', models.CharField(blank=True, help_text='School, University, or Organization', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('role', models.CharField(blank=True, max_length=50)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='coreapp.team')),
                ('user', models.OneToOneField(blank=True, help_text='Linked Django user for login/authentication.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the person giving the testimonial', max_length=100)),
                ('role', models.CharField(help_text='Role/Position of the person (e.g., Team Captain, Judge, Participant)', max_length=100)),
                ('content', models.TextField(help_text='The testimonial content')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '★☆☆☆☆'), (2, '★★☆☆☆'), (3, '★★★☆☆'), (4, '★★★★☆'), (5, '★★★★★')], default=5, help_text='Rating out of 5 stars')),
                ('is_approved', models.BooleanField(default=False, help_text='Set to True to display this testimonial publicly')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(blank=True, help_text='Optional: Link to a specific event this testimonial is about', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='testimonials', to='coreapp.event')),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='coreapp.event')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='coreapp.team')),
            ],
            options={
                'verbose_name': 'Event Registration',
                'verbose_name_plural': 'Event Registrations',
                'unique_together': {('team', 'event')},
            },
        ),
        migrations.CreateModel(
            name='TeamRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(help_text='Overall or championship-specific rank.', validators=[django.core.validators.MinValueValidator(1)])),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('video_url_1', models.URLField(blank=True, help_text='Primary video URL for this ranked team (e.g., performance highlight).', null=True)),
                ('video_url_2', models.URLField(blank=True, help_text='Secondary video URL for this ranked team.', null=True)),
                ('championship', models.ForeignKey(blank=True, help_text='Link to a specific championship if ranks are per championship.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='coreapp.championship')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rankings', to='coreapp.team')),
            ],
            options={
                'ordering': ['rank', '-points_earned'],
                'unique_together': {('team', 'championship')},
            },
        ),
    ]
