user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    upstream backend {
        server backend:8000;
    }

    upstream frontend {
        server frontend:3000;
    }

    # HTTP server - redirect to HTTPS
    server {
        listen 80;
        server_name navyugam.com www.navyugam.com;
        location / {
            return 301 https://$host$request_uri;
        }

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
    }

    HTTPS server
    server {
        listen 443 ssl;
        server_name navyugam.com www.navyugam.com;
        client_max_body_size 20M;
        server_tokens off;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/navyugam.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/navyugam.com/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
        
       
        # Proxy API requests to backend
        location /api/ {
            proxy_pass http://backend/;
            
            # Rate limiting
            limit_req zone=one burst=20 nodelay;
            
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # Handle preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Proxy admin panel requests to Django backend
        location /admin/ {
            proxy_pass http://backend/admin/;
            
            # Basic auth for admin area (uncomment and set up if needed)
            # auth_basic "Admin Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;
        }
        
        # Serve static files directly
        location /static/ {
            alias /app/staticfiles/;
            expires 30d;
            access_log off;
            add_header Cache-Control "public, max-age=2592000, immutable";
            try_files $uri =404;
        }
        
        # Serve media files
        location /media/ {
            alias /app/media/;
            expires 30d;
            access_log off;
            add_header Cache-Control "public, max-age=2592000";
            try_files $uri =404;
        }
        
        # Frontend routing - must be the last location block
        location / {
            proxy_pass http://frontend/;
            
            # Cache control for HTML files
            location ~* \.(?:html?|xml)$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
        }
        
        # Disable logging for favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            expires max;
        }
        
        # Disable logging for robots.txt
        location = /robots.txt {
            log_not_found off;
            access_log off;
            expires 7d;
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }
        
        # Handle errors
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
}
