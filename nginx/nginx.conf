user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Rate limiting configuration
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    # Block common WordPress paths
    map $request_uri $is_wp_scan {
        default 0;
        ~*^(/wp-|/wordpress/|/wp/|/wp2/|/blog/|/cms/|/sito/|/wp-content/|/wp-admin/|/wp-includes/) 1;
    }
    
    # HTTP server for Let's Encrypt validation
    server {
        listen 80;
        server_name navyugam.com www.navyugam.com;

        # Block WordPress scanner requests
        if ($is_wp_scan) {
            return 444;
        }

        # Let's Encrypt challenge directory
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            try_files $uri =404;
        }

        # Redirect HTTP to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name navyugam.com www.navyugam.com;
        client_max_body_size 20M;
        server_tokens off;

        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/navyugam.com-0001/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/navyugam.com-0001/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
        
        # Security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        # Block WordPress scanner requests
        if ($is_wp_scan) {
            return 444;
        }

        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

        # Handle static files
        location /static/ {
            alias /app/staticfiles/;
            expires 30d;
            access_log off;
            add_header Cache-Control "public, max-age=2592000, immutable";
            try_files $uri =404;
        }
        
        # Handle media files
        location /media/ {
            alias /app/media/;
            expires 30d;
            access_log off;
            add_header Cache-Control "public, max-age=2592000";
            try_files $uri =404;
        }

        # Handle admin and API requests
        location ~ ^/(admin|api|api-auth) {
            proxy_pass http://backend:8000;
            proxy_http_version 1.1;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_redirect off;
            limit_req zone=one burst=20 nodelay;
        }
        
        # Handle all other requests with the frontend
        location / {
            proxy_pass http://frontend:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_cache_bypass $http_upgrade;
        }

        # Custom error pages
        error_page 404 /404.html;
        location = /404.html {
            internal;
            return 404 '{"status": 404, "message": "Not Found"}';
            add_header Content-Type application/json;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
            return 500 '{"status": 500, "message": "Internal Server Error"}';
            add_header Content-Type application/json;
        }

    }
        
}
